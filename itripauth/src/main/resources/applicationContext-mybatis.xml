<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- BEGIN=== 1、为业务层增加声明式事务管理的相关配置 ===BEGIN-->
    <!-- 1.1、配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 1.2、使用tx:advice去配置声明式事务增强，并设置事务的属性 -->
    <tx:advice transaction-manager="transactionManager" id="txTransManager">
        <tx:attributes>
            <!-- 以get打头的方法 -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>  <!-- 新增的方法 -->
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/> <!--  修改的方法 -->
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 1.3定义一个切面 -->
    <aop:config>
        <!-- 定义一个切入点, 将声明式事务管理切入到指定的包、类中的方法里 -->
        <aop:pointcut expression="execution(* cn.itrip.auth.service..*(..))" id="pointcut"/>
        <!-- 利用aop:advisor标签将声明式事务管理与切入点结合在一起， 将声明式事务管理切入到指定的包、类中的方法里 -->
        <aop:advisor advice-ref="txTransManager" pointcut-ref="pointcut"/>
    </aop:config>
    <!-- END=== 为业务层增加声明式事务管理的相关配置 ===END-->

    <!-- 2、读取据库配置文件，即database.properties -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:database.properties</value>
            </list>
        </property>
    </bean>

    <!-- 3、配置数据源对象dataSource,使用JNDI获取数据库(dbcp连接池) -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="initialSize" value="${jdbc.initialSize}"></property>
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <property name="maxWait" value="${jdbc.maxWait}"></property>
    </bean>

    <!-- 4、创建SqlSessionFactoryBean对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引入数据源对象 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 引入Mybatis的核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 引入Mybatis的SQL映射文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:cn/itrip/dao/**/*.xml</value>
            </list>
        </property>
    </bean>

    <!-- 5、使用MapperScannerConfigurer去简化DAO层的配置
       实现两个目的：1、它会自动去创建DAO接口的实现类。
                  2、自动为DAO接口实现类注入SqlSessionFactoryBean对象。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.itrip.dao"></property>
    </bean>

    <!-- 6、使用注解@Service简化Service层的配置
       通过context:component-scan标签，Spring会自动去cn.smbms.service包里进行扫描，
       一旦发现使用 @Service注解标注的类，让它注册Bean组件 -->
    <context:component-scan base-package="cn.itrip.auth.service" />

    <!--START === 7、Spring整合Jedis === START-->
    <!--7.1、初始化jedisPoolConfig对象-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
    </bean>
    <!--7.2、创建JedisPool 连接池对象-->
    <!--public JedisPool(GenericObjectPoolConfig poolConfig, String host, int port, int timeout, String password) {-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg ref="jedisPoolConfig"/>
        <constructor-arg value="${redis.host}"/>
        <constructor-arg value="${redis.port}"/>
        <!--timeout=10000 意思是使用Jedis连接Redis，再过了4s后没接连成功就断开连接-->
        <constructor-arg value="${redis.timeout}"/>
        <constructor-arg value="${redis.password}"/>
    </bean>
    <!--7.3、创建RedisAPI Bean实例对象, 这个RedisAPI在itriputils子模块中。-->
    <bean id="redisAPI" class="cn.itrip.common.RedisAPI">
        <!--使用Spring为JedisAPI类中的JedisPool注入依赖对象-->
        <property name="jedisPool" ref="jedisPool"/>
    </bean>
    <!--END === 使用Spring为JedisAPI类中的JedisPool注入依赖对象=== END-->

    <!--引入邮箱注册这块的配置文件-->
    <import resource="applicationContext-mail.xml"/>


</beans>
